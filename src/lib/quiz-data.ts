
import type { Question } from './types';

export const quizData: Question[] = [
  {
    id: 1,
    text: 'What does WCAG stand for?',
    options: [
      { text: 'Web Content Accessibility Guidelines', isCorrect: true },
      { text: 'Web Compliance Accessibility Guide', isCorrect: false },
      { text: 'Website Content Accessibility Graphics', isCorrect: false },
      { text: 'World Coder Accessibility Group', isCorrect: false },
    ],
    explanation: 'WCAG stands for Web Content Accessibility Guidelines, which are internationally recognized standards for web accessibility.',
  },
  {
    id: 2,
    text: 'Which new WCAG 2.2 Level AA success criterion ensures that focused components are not entirely hidden by author-created content?',
    options: [
      { text: '2.4.7 Focus Visible', isCorrect: false },
      { text: '2.4.11 Focus Not Obscured (Minimum)', isCorrect: true },
      { text: '2.5.5 Target Size (AAA)', isCorrect: false },
      { text: '3.2.7 Consistent Help', isCorrect: false }
    ],
    explanation: 'WCAG 2.2 SC 2.4.11 Focus Not Obscured (Minimum) requires that when a user interface component receives focus, no part of it is hidden by author-created content.',
  },
  {
    id: 3,
    text: 'What is the minimum contrast ratio required for normal text (less than 18 point or 14 point bold) according to WCAG AA?',
    options: [
      { text: '3:1', isCorrect: false },
      { text: '4.5:1', isCorrect: true },
      { text: '7:1', isCorrect: false },
      { text: '1.5:1', isCorrect: false },
    ],
    explanation: 'WCAG AA requires a contrast ratio of at least 4.5:1 for normal text and 3:1 for large text (18 point or 14 point bold).',
  },
  {
    id: 4,
    text: 'Which of these is a principle of WCAG?',
    options: [
      { text: 'Readable', isCorrect: false },
      { text: 'Understandable', isCorrect: true },
      { text: 'Simple', isCorrect: false },
      { text: 'Interactive', isCorrect: false },
    ],
    explanation: 'The four principles of WCAG are: Perceivable, Operable, Understandable, and Robust (POUR).',
  },
  {
    id: 5,
    text: 'Alternative text for images primarily helps which group of users?',
    options: [
      { text: 'Users with slow internet connections', isCorrect: false },
      { text: 'Users who are blind or have low vision', isCorrect: true },
      { text: 'Users with cognitive disabilities', isCorrect: false },
      { text: 'Users who prefer keyboard navigation', isCorrect: false },
    ],
    explanation: 'Alternative text (alt text) provides a textual description of an image, which is read aloud by screen readers for users who cannot see the image.',
  },
  {
    id: 6,
    text: 'Which new WCAG 2.2 success criterion addresses the minimum size of interactive targets?',
    options: [
      { text: '2.5.5 Target Size (AAA)', isCorrect: false },
      { text: '2.4.13 Focus Appearance', isCorrect: false },
      { text: '2.5.8 Target Size (Minimum)', isCorrect: true },
      { text: '2.4.12 Focus Not Obscured (Enhanced)', isCorrect: false },
    ],
    explanation: 'WCAG 2.2 SC 2.5.8 Target Size (Minimum) (Level AA) specifies a minimum target size of 24 by 24 CSS pixels for most interactive controls.',
  },
  {
    id: 7,
    text: 'What does ARIA stand for in web accessibility?',
    options: [
      { text: 'Accessible Rich Internet Applications', isCorrect: true },
      { text: 'Advanced Responsive Internet Architecture', isCorrect: false },
      { text: 'Automated Readability Indexing Application', isCorrect: false },
      { text: 'Accessible Rich Information Access', isCorrect: false },
    ],
    explanation: 'ARIA stands for Accessible Rich Internet Applications. It provides semantics that can be added to HTML elements to make web content and applications more accessible to people with disabilities.',
  },
  {
    id: 8,
    text: 'The WCAG 2.2 success criterion "Dragging Movements" (2.5.7) requires that:',
    options: [
      { text: 'All functionality must be available via dragging.', isCorrect: false },
      { text: 'Dragging movements must be controllable with a mouse only.', isCorrect: false },
      { text: 'Functionality operable through dragging must also be achievable via a single pointer without dragging, unless dragging is essential.', isCorrect: true },
      { text: 'Dragging actions must have a minimum speed.', isCorrect: false },
    ],
    explanation: 'SC 2.5.7 Dragging Movements (Level AA) ensures that if functionality can be operated using a dragging movement, it can also be operated by a single pointer without dragging, unless dragging is essential or the functionality is achieved via a different conforming way.',
  },
  {
    id: 9,
    text: 'Which WCAG 2.2 success criterion helps users avoid re-entering the same information multiple times within a process?',
    options: [
      { text: '3.3.7 Redundant Entry', isCorrect: false }, 
      { text: '3.3.9 Redundant Entry', isCorrect: true },
      { text: '3.3.1 Error Identification', isCorrect: false },
      { text: '3.3.8 Accessible Authentication (Minimum)', isCorrect: false },
    ],
    explanation: 'WCAG 2.2 SC 3.3.9 Redundant Entry (Level A) aims to reduce cognitive load by ensuring users are not required to re-enter information they have already provided in the same process, or that information is available for the user to select.',
  },
  {
    id: 10,
    text: 'Which HTML element is most appropriate for a primary heading on a page?',
    options: [
      { text: '<div class="heading">', isCorrect: false },
      { text: '<h1>', isCorrect: true },
      { text: '<header>', isCorrect: false },
      { text: '<p style="font-size: 2em; font-weight: bold;">', isCorrect: false },
    ],
    explanation: 'The <h1> element should be used for the primary heading of a page as it provides semantic meaning for assistive technologies and search engines. There should generally be only one <h1> per page.',
  },
  {
    id: 11,
    text: 'WCAG 2.2 SC 2.4.13 Focus Appearance (Level AAA) is concerned with:',
    options: [
      { text: 'The speed at which focus indicators appear.', isCorrect: false },
      { text: 'The color contrast and thickness of the focus indicator.', isCorrect: true },
      { text: 'Ensuring focus is never obscured.', isCorrect: false }, 
      { text: 'The shape of the focus indicator.', isCorrect: false }, 
    ],
    explanation: 'SC 2.4.13 Focus Appearance (Level AAA) requires focus indicators to have sufficient contrast and size to be easily discernible.',
  },
  {
    id: 12,
    text: 'The "Accessible Authentication (Minimum)" success criterion (3.3.8) in WCAG 2.2 primarily addresses:',
    options: [
      { text: 'Ensuring all authentication methods are free.', isCorrect: false },
      { text: 'Allowing users to authenticate using biometrics only.', isCorrect: false },
      { text: 'Avoiding cognitive function tests (like solving puzzles or remembering passwords) for authentication if other methods are available.', isCorrect: true },
      { text: 'Requiring two-factor authentication for all users.', isCorrect: false },
    ],
    explanation: 'SC 3.3.8 Accessible Authentication (Minimum) (Level AA) helps users with cognitive disabilities by ensuring that authentication processes do not rely solely on cognitive function tests if alternative, more accessible methods can be provided.',
  },
  {
    id: 13,
    text: 'What is the purpose of the `lang` attribute on the `<html>` element (e.g., `<html lang="en">`)?',
    options: [
      { text: 'To set the display language of the browser interface.', isCorrect: false },
      { text: 'To indicate the primary language of the page content for assistive technologies.', isCorrect: true },
      { text: 'To translate the page content automatically.', isCorrect: false },
      { text: 'To specify the character encoding of the page.', isCorrect: false },
    ],
    explanation: 'The `lang` attribute on the `<html>` element declares the default language of the text in the page, which helps screen readers pronounce words correctly and enables browsers to select appropriate fonts or spell checkers.',
  },
  {
    id: 14,
    text: 'Which of these is NOT a WCAG conformance level?',
    options: [
      { text: 'A', isCorrect: false },
      { text: 'AA', isCorrect: false },
      { text: 'AAA', isCorrect: false },
      { text: 'AAAA', isCorrect: true },
    ],
    explanation: 'WCAG defines three conformance levels: A (lowest), AA (mid-range, often the target for legal compliance), and AAA (highest). There is no AAAA level.',
  },
  {
    id: 15,
    text: 'For keyboard accessibility, interactive elements like buttons and links must be:',
    options: [
      { text: 'Visible only on mouse hover.', isCorrect: false },
      { text: 'Operable with a mouse only.', isCorrect: false },
      { text: 'Focusable and operable using the keyboard.', isCorrect: true },
      { text: 'Styled with a specific color.', isCorrect: false },
    ],
    explanation: 'To ensure keyboard accessibility, all interactive elements must be reachable (focusable) and operable (activatable) using only the keyboard, typically via Tab, Shift+Tab, Enter, and Space keys.',
  },
  {
    id: 16,
    text: 'What is the purpose of `aria-live` regions?',
    options: [
      { text: 'To make elements draggable.', isCorrect: false },
      { text: 'To provide live updates to screen reader users about changes on the page.', isCorrect: true },
      { text: 'To enable live video streaming.', isCorrect: false },
      { text: 'To style elements that change dynamically.', isCorrect: false },
    ],
    explanation: '`aria-live` regions are used to indicate content sections that may update dynamically (e.g., status messages, chat logs) and to inform assistive technologies to announce these changes to users.',
  },
  {
    id: 17,
    text: 'Which ARIA attribute is used to define the role of an element when its native HTML semantics are insufficient?',
    options: [
      { text: '`aria-label`', isCorrect: false },
      { text: '`role`', isCorrect: true },
      { text: '`aria-hidden`', isCorrect: false },
      { text: '`tabindex`', isCorrect: false },
    ],
    explanation: 'The `role` attribute is used to define the specific purpose or function of an element, especially for custom widgets or when overriding native HTML semantics (e.g., using a `<div>` as a button).',
  },
  {
    id: 18,
    text: 'WCAG SC 1.4.4 Resize text requires that text can be resized without assistive technology up to:',
    options: [
      { text: '150 percent', isCorrect: false },
      { text: '200 percent', isCorrect: true },
      { text: '300 percent', isCorrect: false },
      { text: 'No limit specified', isCorrect: false },
    ],
    explanation: 'SC 1.4.4 Resize text (Level AA) requires that text can be resized without loss of content or functionality up to 200 percent, without requiring users to use assistive technology.',
  },
  {
    id: 19,
    text: 'What is a "keyboard trap"?',
    options: [
      { text: 'A shortcut key that performs an unexpected action.', isCorrect: false },
      { text: 'When a keyboard user can navigate into a component but cannot navigate out using the keyboard.', isCorrect: true },
      { text: 'A feature that only works with a specific keyboard.', isCorrect: false },
      { text: 'A visual indication that an element is focused by the keyboard.', isCorrect: false },
    ],
    explanation: 'A keyboard trap occurs when a user can tab into an element or group of elements but cannot tab out or to other parts of the page using only the keyboard, effectively trapping their focus.',
  },
  {
    id: 20,
    text: 'Which of the following is generally NOT recommended for link text?',
    options: [
      { text: 'Descriptive text like "Read more about our services"', isCorrect: false },
      { text: 'Vague text like "Click here" or "Read more"', isCorrect: true },
      { text: 'The title of the page being linked to', isCorrect: false },
      { text: 'Text that makes sense out of context', isCorrect: false },
    ],
    explanation: 'Link text should be descriptive and make sense on its own, even when read out of context. Vague phrases like "Click here" or "Read more" provide little information to users, especially screen reader users who may navigate by links.',
  },
  {
    id: 21,
    text: 'WCAG SC 3.2.2 On Input states that changing the setting of any user interface component should not automatically cause a change of context unless:',
    options: [
      { text: 'The change is very minor.', isCorrect: false },
      { text: 'The user has been advised of the behavior before using the component.', isCorrect: true },
      { text: 'The component is a search field.', isCorrect: false },
      { text: 'The page reloads quickly.', isCorrect: false },
    ],
    explanation: 'SC 3.2.2 On Input (Level A) aims to prevent unexpected changes of context (like navigating to a new page or significantly rearranging content) when a user interacts with a form control, unless they are warned beforehand.',
  },
  {
    id: 22,
    text: 'What is the primary purpose of semantic HTML (e.g., `<nav>`, `<article>`, `<aside>`)?',
    options: [
      { text: 'To make HTML code shorter.', isCorrect: false },
      { text: 'To provide meaning and structure to content, benefiting SEO and assistive technologies.', isCorrect: true },
      { text: 'To automatically style web pages.', isCorrect: false },
      { text: 'To ensure compatibility with older browsers.', isCorrect: false },
    ],
    explanation: 'Semantic HTML elements describe the meaning and structure of web content, which helps search engines understand the content and assistive technologies (like screen readers) to provide better navigation and context to users.',
  },
  {
    id: 23,
    text: 'WCAG SC 2.1.1 Keyboard ensures all functionality is operable through a keyboard interface except where:',
    options: [
      { text: 'The functionality is for mouse users only.', isCorrect: false },
      { text: 'The underlying function requires input that depends on the path of the user\'s movement and not just the endpoints.', isCorrect: true },
      { text: 'The page uses complex JavaScript.', isCorrect: false },
      { text: 'The functionality is hidden by default.', isCorrect: false },
    ],
    explanation: 'SC 2.1.1 Keyboard (Level A) requires all functionality to be keyboard accessible, with a rare exception for path-dependent input (e.g., freehand drawing).',
  },
  {
    id: 24,
    text: 'When providing error messages for form fields, where is it best to place them for accessibility?',
    options: [
      { text: 'At the bottom of the page.', isCorrect: false },
      { text: 'Visually and programmatically associated with the respective form field, often appearing next to or below it.', isCorrect: true },
      { text: 'In a pop-up dialog after submission.', isCorrect: false },
      { text: 'Only visible on mouse hover over the field.', isCorrect: false },
    ],
    explanation: 'Error messages should be clearly associated with the form field they relate to, both visually and programmatically (e.g., using `aria-describedby`), to help users quickly identify and correct errors.',
  },
  {
    id: 25,
    text: 'What does the `aria-hidden="true"` attribute do?',
    options: [
      { text: 'It makes an element visible only to screen readers.', isCorrect: false },
      { text: 'It hides an element visually from all users.', isCorrect: false },
      { text: 'It removes an element and its children from the accessibility tree, making them invisible to assistive technologies.', isCorrect: true },
      { text: 'It adds extra information for screen readers.', isCorrect: false },
    ],
    explanation: '`aria-hidden="true"` removes an element and its content from the accessibility tree, so assistive technologies will ignore it. This is useful for purely decorative content or content that is redundant for screen reader users.',
  },
  {
    id: 26,
    text: 'WCAG SC 1.3.1 Info and Relationships requires that information, structure, and relationships conveyed through presentation can be:',
    options: [
      { text: 'Styled with CSS.', isCorrect: false },
      { text: 'Programmatically determined or are available in text.', isCorrect: true },
      { text: 'Viewed on all screen sizes.', isCorrect: false },
      { text: 'Accessed using a mouse.', isCorrect: false },
    ],
    explanation: 'SC 1.3.1 Info and Relationships (Level A) ensures that relationships and structure (e.g., headings, lists, table headers) that are apparent visually are also available programmatically to assistive technologies.',
  },
  {
    id: 27,
    text: 'For a complex data table, which HTML elements are crucial for making it accessible?',
    options: [
      { text: '`<div>` and `<span>` for styling cells.', isCorrect: false },
      { text: '`<th>` for header cells (often with `scope` attribute), `<caption>` for a table title, and proper use of `<table>`.', isCorrect: true },
      { text: 'Using bold text for headers instead of `<th>`.', isCorrect: false },
      { text: '`<img>` tags inside cells for visual cues.', isCorrect: false },
    ],
    explanation: 'Accessible data tables use `<th>` for row and column headers (often with `scope="col"` or `scope="row"`), a `<caption>` to describe the table, and ensure logical structure so screen readers can announce cell relationships correctly.',
  },
  {
    id: 28,
    text: 'What is the recommended way to hide content visually but keep it accessible to screen readers (e.g., for skip links)?',
    options: [
      { text: '`display: none;`', isCorrect: false },
      { text: '`visibility: hidden;`', isCorrect: false },
      { text: 'Using CSS to position the element off-screen or clip it.', isCorrect: true },
      { text: 'Setting `opacity: 0;`', isCorrect: false },
    ],
    explanation: 'Techniques like positioning content off-screen (e.g., `position: absolute; left: -9999px;`) or using `clip-path` allow content to be visually hidden but still part of the accessibility tree and readable by screen readers. `display: none` and `visibility: hidden` remove it from the accessibility tree.',
  },
  {
    id: 29,
    text: 'WCAG SC 2.4.6 Headings and Labels (Level AA) requires that:',
    options: [
      { text: 'All pages must have at least five headings.', isCorrect: false },
      { text: 'Headings and labels describe topic or purpose.', isCorrect: true },
      { text: 'Labels must be visually hidden.', isCorrect: false },
      { text: 'Headings must be in all caps.', isCorrect: false },
    ],
    explanation: 'SC 2.4.6 Headings and Labels (Level AA) ensures that headings and labels are clear and descriptive, helping users understand the content and navigate the page more easily.',
  },
  {
    id: 30,
    text: 'When using icons as interactive controls (e.g., an icon button), what is crucial for accessibility?',
    options: [
      { text: 'Ensuring the icon is large enough.', isCorrect: false },
      { text: 'Providing a visible text label or an accessible name via ARIA (e.g., `aria-label`) if no visible label exists.', isCorrect: true },
      { text: 'Using SVG format for all icons.', isCorrect: false },
      { text: 'Making the icon change color on hover.', isCorrect: false },
    ],
    explanation: 'Icons used as buttons or links need an accessible name so screen readers can announce their purpose. This can be achieved with a visible text label, or an `aria-label` if the design doesn\'t include visible text.',
  },
  {
    id: 31,
    text: 'WCAG SC 1.1.1 Non-text Content requires that all non-text content that is presented to the user has a text alternative, except for certain situations. Which is one of these exceptions?',
    options: [
      { text: 'Images used for branding.', isCorrect: false },
      { text: 'Purely decorative images.', isCorrect: true },
      { text: 'User-generated content.', isCorrect: false },
      { text: 'Complex charts and graphs.', isCorrect: false },
    ],
    explanation: 'Purely decorative images, which provide no information and serve only an aesthetic purpose, should have an empty alt attribute (`alt=""`) or be implemented as CSS background images so they are ignored by assistive technologies.',
  },
  {
    id: 32,
    text: 'What is the purpose of "skip navigation" links?',
    options: [
      { text: 'To skip directly to the footer of the page.', isCorrect: false },
      { text: 'To allow keyboard users to bypass blocks of repeated content, like main navigation, and go directly to the main content.', isCorrect: true },
      { text: 'To skip advertisements on a page.', isCorrect: false },
      { text: 'To quickly navigate between different sections of the navigation menu.', isCorrect: false },
    ],
    explanation: 'Skip navigation links (often "Skip to main content") are typically the first focusable item on a page and allow keyboard users to avoid tabbing through extensive navigation menus on every page load.',
  },
  {
    id: 33,
    text: 'WCAG SC 1.4.1 Use of Color states that color should not be used as the only visual means of:',
    options: [
      { text: 'Styling a website.', isCorrect: false },
      { text: 'Conveying information, indicating an action, prompting a response, or distinguishing a visual element.', isCorrect: true },
      { text: 'Highlighting important text.', isCorrect: false },
      { text: 'Creating brand identity.', isCorrect: false },
    ],
    explanation: 'SC 1.4.1 Use of Color (Level A) ensures that if color is used to convey information (e.g., red for errors), there is also another visual cue (e.g., an icon, text label) so users who cannot perceive color differences can still understand.',
  },
  {
    id: 34,
    text: 'For video content, what accessibility features should be provided to meet WCAG AA?',
    options: [
      { text: 'High-resolution video quality.', isCorrect: false },
      { text: 'Captions for prerecorded audio content, and audio descriptions for prerecorded video content.', isCorrect: true },
      { text: 'Autoplay functionality.', isCorrect: false },
      { text: 'A transcript only.', isCorrect: false },
    ],
    explanation: 'WCAG AA requires captions for synchronized media (SC 1.2.2) and audio descriptions for prerecorded video content (SC 1.2.5) to make it accessible for users with hearing and visual impairments, respectively.',
  },
  {
    id: 35,
    text: 'What is the `tabindex` attribute used for?',
    options: [
      { text: 'To set the font size of an element.', isCorrect: false },
      { text: 'To control the order in which elements receive keyboard focus and whether non-interactive elements can receive focus.', isCorrect: true },
      { text: 'To create tabbed interfaces.', isCorrect: false },
      { text: 'To define the width of a table column.', isCorrect: false },
    ],
    explanation: '`tabindex="0"` allows an element that is not natively focusable (like a `<div>`) to be included in the default tab order. `tabindex="-1"` allows an element to receive programmatic focus (e.g., via JavaScript) but not be part of the default tab order. Positive `tabindex` values are generally discouraged as they disrupt the natural tab order.',
  },
  {
    id: 36,
    text: 'WCAG SC 2.2.1 Timing Adjustable (Level A) requires that for time limits set by the content, at least one of the following is true:',
    options: [
      { text: 'The time limit is always more than 20 hours.', isCorrect: false },
      { text: 'The user can turn off, adjust, or extend the time limit (with some exceptions).', isCorrect: true },
      { text: 'A countdown timer is always visible.', isCorrect: false },
      { text: 'The time limit can only be set by the user.', isCorrect: false },
    ],
    explanation: 'SC 2.2.1 Timing Adjustable (Level A) helps users who need more time to read or interact with content by requiring that they can control time limits, unless the time limit is essential (e.g., an auction) or longer than 20 hours.',
  },
  {
    id: 37,
    text: 'Which ARIA role would be most appropriate for a custom-built dropdown menu (combobox pattern)?',
    options: [
      { text: '`role="menu"`', isCorrect: false },
      { text: '`role="combobox"` for the container/input, with related roles like `listbox` and `option`.', isCorrect: true },
      { text: '`role="navigation"`', isCorrect: false },
      { text: '`role="dialog"`', isCorrect: false },
    ],
    explanation: 'For a custom dropdown that allows users to type and select from a list of suggestions, the `combobox` role pattern is appropriate. This typically involves an input with `role="combobox"`, `aria-haspopup="listbox"`, `aria-expanded`, and a container for options with `role="listbox"` and child elements with `role="option"`.',
  },
  {
    id: 38,
    text: 'WCAG SC 3.3.2 Labels or Instructions (Level A) requires that labels or instructions are provided when:',
    options: [
      { text: 'Content requires user input.', isCorrect: true },
      { text: 'Content is complex.', isCorrect: false },
      { text: 'A page has more than 10 form fields.', isCorrect: false },
      { text: 'The website is for a global audience.', isCorrect: false },
    ],
    explanation: 'SC 3.3.2 Labels or Instructions (Level A) ensures that users understand what input is expected from them by providing clear labels for form fields and instructions where needed.',
  },
  {
    id: 39,
    text: 'What is the primary accessibility concern with content that flashes or blinks rapidly?',
    options: [
      { text: 'It can be distracting for users with ADHD.', isCorrect: false },
      { text: 'It can trigger seizures in individuals with photosensitive epilepsy.', isCorrect: true },
      { text: 'It can be difficult to read for users with low vision.', isCorrect: false },
      { text: 'It can slow down page loading times.', isCorrect: false },
    ],
    explanation: 'WCAG SC 2.3.1 Three Flashes or Below Threshold (Level A) aims to prevent content from flashing more than three times per second, or ensure flashes are below general flash and red flash thresholds, as this can induce seizures.',
  },
  {
    id: 40,
    text: 'If an image is the only content within a link (e.g., a logo linking to the homepage), what should its alt text convey?',
    options: [
      { text: 'An empty string (`alt=""`)', isCorrect: false },
      { text: 'The destination of the link (e.g., "Homepage" or "BrandName Homepage").', isCorrect: true },
      { text: 'A detailed description of the image\'s visual appearance.', isCorrect: false },
      { text: 'The filename of the image.', isCorrect: false },
    ],
    explanation: 'When an image is within a link and is the sole content, its alt text should describe the function or destination of the link. If there is also text within the link that describes the destination, the image could be decorative (`alt=""`).',
  },
  {
    id: 41,
    text: 'WCAG SC 2.4.3 Focus Order (Level A) requires that if a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that:',
    options: [
      { text: 'Is alphabetical.', isCorrect: false },
      { text: 'Preserves meaning and operability.', isCorrect: true },
      { text: 'Is random to enhance security.', isCorrect: false },
      { text: 'Follows the visual layout from right to left.', isCorrect: false },
    ],
    explanation: 'SC 2.4.3 Focus Order (Level A) ensures that the tab order is logical and predictable, typically following the visual reading order, so keyboard users can navigate and understand the page effectively.',
  },
  {
    id: 42,
    text: 'Which of these ARIA attributes would you use to indicate that a form field is required?',
    options: [
      { text: '`aria-required="true"`', isCorrect: true },
      { text: '`aria-invalid="true"`', isCorrect: false },
      { text: '`aria-haspopup="true"`', isCorrect: false },
      { text: '`aria-readonly="true"`', isCorrect: false },
    ],
    explanation: '`aria-required="true"` programmatically indicates to assistive technologies that a form field must be filled out by the user before the form can be submitted.',
  },
  {
    id: 43,
    text: 'What is "progressive enhancement" in the context of web development and accessibility?',
    options: [
      { text: 'Making a website look progressively better on newer browsers.', isCorrect: false },
      { text: 'Starting with a baseline of usable content and functionality for all users, then adding more advanced features for capable browsers/devices.', isCorrect: true },
      { text: 'Gradually increasing the font size as users scroll.', isCorrect: false },
      { text: 'Loading website features one by one to improve perceived performance.', isCorrect: false },
    ],
    explanation: 'Progressive enhancement is a strategy where core content and functionality are accessible to all, and then enhancements (JavaScript, CSS3, etc.) are layered on top for users with more capable browsers or assistive technologies. This often leads to more robust and accessible experiences.',
  },
  {
    id: 44,
    text: 'WCAG SC 3.1.1 Language of Page (Level A) requires that the default human language of each Web page can be:',
    options: [
      { text: 'Detected by the browser automatically.', isCorrect: false },
      { text: 'Programmatically determined.', isCorrect: true },
      { text: 'Set using a meta tag.', isCorrect: false },
      { text: 'Translated into at least five languages.', isCorrect: false },
    ],
    explanation: 'SC 3.1.1 Language of Page (Level A) requires specifying the page\'s primary language (e.g., via `<html lang="en">`) so assistive technologies can correctly pronounce content and apply appropriate language rules.',
  },
  {
    id: 45,
    text: 'When designing custom radio buttons or checkboxes, what is essential for keyboard accessibility?',
    options: [
      { text: 'They must look identical to native controls.', isCorrect: false },
      { text: 'They must be focusable, operable using Spacebar (for checkboxes and radio buttons) and arrow keys (for radio groups), and their state (checked/unchecked) must be conveyed programmatically (e.g., using `aria-checked`).', isCorrect: true },
      { text: 'They must only be operable with a mouse click.', isCorrect: false },
      { text: 'They should change color significantly when checked.', isCorrect: false },
    ],
    explanation: 'Custom controls must replicate the keyboard behavior of their native counterparts. For checkboxes and radio buttons, this includes focusability, operation via Spacebar, and for radio groups, navigation between options using arrow keys. Their state must also be exposed via ARIA attributes like `aria-checked`.',
  },
  {
    id: 46,
    text: 'WCAG SC 1.4.10 Reflow (Level AA) relates to ensuring content can be presented without loss of information or functionality, and without requiring scrolling in two dimensions for:',
    options: [
      { text: 'Content viewed at 400% zoom on a desktop browser.', isCorrect: false },
      { text: 'Vertical scrolling content at a width equivalent to 320 CSS pixels or horizontal scrolling content at a height equivalent to 256 CSS pixels.', isCorrect: true },
      { text: 'Text-only browsers.', isCorrect: false },
      { text: 'Mobile devices in landscape mode only.', isCorrect: false },
    ],
    explanation: 'SC 1.4.10 Reflow (Level AA) ensures that content reflows to a single column when zoomed or viewed on small screens (equivalent to 320 CSS pixels wide for vertical scrolling, or 256 CSS pixels high for horizontal scrolling), avoiding horizontal scrolling for reading text.',
  },
  {
    id: 47,
    text: 'What is the purpose of the `aria-labelledby` attribute?',
    options: [
      { text: 'To provide a short hint for a form field.', isCorrect: false },
      { text: 'To associate an element with another element on the page that serves as its label, by referencing the ID of the labelling element.', isCorrect: true },
      { text: 'To link to a detailed description of an element.', isCorrect: false },
      { text: 'To indicate the current state of a toggle button.', isCorrect: false },
    ],
    explanation: '`aria-labelledby` allows an element to use the content of another element (or multiple elements) on the page as its accessible name. This is useful when a label is not directly adjacent or when an element is labeled by multiple sources.',
  },
  {
    id: 48,
    text: 'For users with cognitive and learning disabilities, which of the following design considerations is particularly helpful?',
    options: [
      { text: 'Using complex vocabulary to sound more professional.', isCorrect: false },
      { text: 'Consistent navigation and layout across pages.', isCorrect: true },
      { text: 'Animations that play automatically on page load.', isCorrect: false },
      { text: 'Long blocks of uninterrupted text.', isCorrect: false },
    ],
    explanation: 'Consistent navigation, clear layout, simple language, and predictable interfaces greatly benefit users with cognitive and learning disabilities by reducing cognitive load and making it easier to understand and use the website.',
  },
  {
    id: 49,
    text: 'WCAG SC 2.5.3 Label in Name (Level A) requires that for user interface components with labels that include text or images of text, the accessible name:',
    options: [
      { text: 'Must be shorter than the visible label.', isCorrect: false },
      { text: 'Contains the text that is presented visually.', isCorrect: true },
      { text: 'Is generated automatically by the browser.', isCorrect: false },
      { text: 'Is always "button" or "link".', isCorrect: false },
    ],
    explanation: 'SC 2.5.3 Label in Name (Level A) helps speech input users by ensuring that the accessible name (what they would speak to activate a control) includes the visible label text. This allows them to activate controls by saying what they see.',
  },
  {
    id: 50,
    text: 'What is an "accessible rich internet application" (ARIA) landmark role?',
    options: [
      { text: 'A type of font designed for readability.', isCorrect: false },
      { text: 'Roles that define regions of a page, such as `banner`, `navigation`, `main`, and `contentinfo`, to help screen reader users orient themselves and navigate.', isCorrect: true },
      { text: 'A JavaScript library for building accessible components.', isCorrect: false },
      { text: 'A visual marker on the page for important content.', isCorrect: false },
    ],
    explanation: 'ARIA landmark roles (e.g., `<header role="banner">`, `<nav role="navigation">`, `<main role="main">`, `<footer role="contentinfo">`) define significant sections of a page, allowing assistive technology users to quickly jump to these regions.',
  },
  {
    id: 51,
    text: 'WCAG SC 1.4.12 Text Spacing (Level AA) requires that no loss of content or functionality occurs when users override text spacing properties. Which properties are covered?',
    options: [
      { text: 'Font family, font weight, and text decoration.', isCorrect: false },
      { text: 'Line height, spacing following paragraphs, letter spacing, and word spacing.', isCorrect: true },
      { text: 'Text color and background color.', isCorrect: false },
      { text: 'Text alignment and indentation.', isCorrect: false },
    ],
    explanation: 'SC 1.4.12 Text Spacing (Level AA) ensures readability for users who customize text spacing. It covers line height (to at least 1.5 times the font size), spacing following paragraphs (to at least 2 times the font size), letter spacing (to at least 0.12 times the font size), and word spacing (to at least 0.16 times the font size).',
  },
  {
    id: 52,
    text: 'If a button triggers an action but does not navigate to a new page, which HTML element is generally more appropriate?',
    options: [
      { text: '`<a href="#">`', isCorrect: false },
      { text: '`<button type="button">`', isCorrect: true },
      { text: '`<span>` with a click handler', isCorrect: false },
      { text: '`<input type="submit">`', isCorrect: false },
    ],
    explanation: 'The `<button>` element is semantically correct for actions that occur on the current page (e.g., submitting a form, opening a modal, playing media). `<a>` tags are for navigation. `<span>` lacks native button semantics and keyboard accessibility.',
  },
  {
    id: 53,
    text: 'What is the "curb-cut effect" in relation to accessibility?',
    options: [
      { text: 'A visual design style featuring rounded corners.', isCorrect: false },
      { text: 'The phenomenon where features designed for people with disabilities also benefit a much wider group of users.', isCorrect: true },
      { text: 'A technique for reducing website loading times.', isCorrect: false },
      { text: 'A legal penalty for non-compliance with accessibility standards.', isCorrect: false },
    ],
    explanation: 'The curb-cut effect refers to how features initially created for disability access (like curb cuts for wheelchairs) often provide unexpected benefits to the general population (e.g., people with strollers, luggage, or delivery carts). Similarly, web accessibility features often improve usability for everyone.',
  },
  {
    id: 54,
    text: 'WCAG SC 4.1.2 Name, Role, Value (Level A) requires that for all user interface components, their name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes is available to:',
    options: [
      { text: 'Web analytics software.', isCorrect: false },
      { text: 'User agents, including assistive technologies.', isCorrect: true },
      { text: 'Web server administrators.', isCorrect: false },
      { text: 'Graphic designers.', isCorrect: false },
    ],
    explanation: 'SC 4.1.2 Name, Role, Value (Level A) is crucial for ensuring custom controls are interoperable with assistive technologies. It means that the purpose (role), label (name), and current state/value of UI components must be exposed programmatically.',
  },
  {
    id: 55,
    text: 'When should `aria-live="assertive"` be used instead of `aria-live="polite"`?',
    options: [
      { text: 'For non-critical updates like a "message sent" confirmation.', isCorrect: false },
      { text: 'For urgent, time-sensitive updates or errors that require immediate user attention (e.g., "Session timed out").', isCorrect: true },
      { text: 'For content that updates very frequently, like a stock ticker.', isCorrect: false },
      { text: 'It should always be preferred over `aria-live="polite"`.', isCorrect: false },
    ],
    explanation: '`aria-live="polite"` requests that assistive technologies announce updates at the next graceful opportunity (e.g., when the user pauses). `aria-live="assertive"` requests an immediate announcement, potentially interrupting the user, and should be reserved for critical information.',
  },
  {
    id: 56,
    text: 'WCAG SC 1.3.5 Identify Input Purpose (Level AA) helps users by:',
    options: [
      { text: 'Ensuring all input fields have visible labels.', isCorrect: false },
      { text: 'Allowing browsers and assistive technologies to autocomplete form fields related to user information (e.g., name, address) by programmatically identifying their purpose.', isCorrect: true },
      { text: 'Providing detailed instructions for each input field.', isCorrect: false },
      { text: 'Validating input formats automatically.', isCorrect: false },
    ],
    explanation: 'SC 1.3.5 Identify Input Purpose (Level AA) involves using the `autocomplete` attribute with appropriate tokens (e.g., `autocomplete="name"`, `autocomplete="email"`) to programmatically define the expected meaning of form inputs, enabling features like browser autofill for users, especially beneficial for those with cognitive or motor impairments.',
  },
  {
    id: 57,
    text: 'What is a common accessibility issue with modal dialogs?',
    options: [
      { text: 'They are always too small.', isCorrect: false },
      { text: 'Focus is not properly managed (e.g., not moved into the dialog, not trapped within, not returned to the trigger on close), and the underlying page is not inert.', isCorrect: true },
      { text: 'They cannot contain form elements.', isCorrect: false },
      { text: 'They always have poor color contrast.', isCorrect: false },
    ],
    explanation: 'Accessible modal dialogs require careful focus management: focus must move to an element within the dialog when opened, be trapped inside the dialog (so tabbing doesn\'t go to the background content), and return to the element that triggered it when closed. The background content should also be made inert (e.g., using `aria-hidden="true"` or the `<dialog>` element).',
  },
  {
    id: 58,
    text: 'The HTML `<figure>` and `<figcaption>` elements are used to:',
    options: [
      { text: 'Create interactive charts.', isCorrect: false },
      { text: 'Semantically associate a caption with a piece of self-contained content like an image, diagram, or code snippet.', isCorrect: true },
      { text: 'Define a section of a page with a heading.', isCorrect: false },
      { text: 'Embed multimedia content.', isCorrect: false },
    ],
    explanation: '`<figure>` represents self-contained content, optionally with a caption provided by `<figcaption>`. This association is programmatically available to assistive technologies.',
  },
  {
    id: 59,
    text: 'WCAG SC 3.2.4 Consistent Identification (Level AA) means that components that have the same functionality within a set of Web pages are:',
    options: [
      { text: 'Styled identically.', isCorrect: false },
      { text: 'Identified consistently (e.g., same labels, names, or icons).', isCorrect: true },
      { text: 'Placed in the exact same location on every page.', isCorrect: false },
      { text: 'Implemented using the same JavaScript library.', isCorrect: false },
    ],
    explanation: 'SC 3.2.4 Consistent Identification (Level AA) promotes predictability by requiring that components performing the same function across multiple pages (e.g., a "Search" icon or a "Help" link) are labeled or named consistently.',
  },
  {
    id: 60,
    text: 'For a CAPTCHA to be accessible, what must be provided?',
    options: [
      { text: 'It must be very difficult to solve to ensure security.', isCorrect: false },
      { text: 'Alternative forms that are accessible to different disabilities (e.g., audio CAPTCHA for visual, text-based alternatives for audio) and a means to bypass the CAPTCHA for some users if necessary.', isCorrect: true },
      { text: 'Only a visual image-based challenge.', isCorrect: false },
      { text: 'A CAPTCHA that automatically submits after a time limit.', isCorrect: false },
    ],
    explanation: 'CAPTCHAs can be significant barriers. To be accessible, they need alternatives (e.g., an audio version for users who are blind, a simple logic puzzle not reliant on sensory perception). WCAG 2.2 SC 3.3.8 Accessible Authentication (Minimum) also addresses reducing reliance on cognitive tests for authentication.',
  },
  {
    id: 61,
    text: 'What is the primary purpose of the `aria-describedby` attribute?',
    options: [
      { text: 'To provide a short label for an element.', isCorrect: false },
      { text: 'To link an element to other elements on the page that provide a more detailed description or instructions, which assistive technologies can read out.', isCorrect: true },
      { text: 'To indicate that an element is currently disabled.', isCorrect: false },
      { text: 'To specify the language of an element\'s content.', isCorrect: false },
    ],
    explanation: '`aria-describedby` is used to programmatically associate an element with supplementary information or instructions (identified by their IDs). This description is typically read by screen readers after the element\'s label and role.',
  },
  {
    id: 62,
    text: 'WCAG SC 2.4.4 Link Purpose (In Context) (Level A) requires that the purpose of each link can be determined from:',
    options: [
      { text: 'The link text alone, or from the link text together with its programmatically determined link context.', isCorrect: true },
      { text: 'The color of the link.', isCorrect: false },
      { text: 'The URL of the link destination.', isCorrect: false },
      { text: 'A tooltip that appears on mouse hover.', isCorrect: false },
    ],
    explanation: 'SC 2.4.4 Link Purpose (In Context) (Level A) ensures users can understand where a link will take them. The purpose should be clear either from the link text itself or from its surrounding content (e.g., the sentence, list item, or table cell it\'s in).',
  },
  {
    id: 63,
    text: 'Which of the following is a key aspect of making mobile applications accessible?',
    options: [
      { text: 'Using very small font sizes to fit more content on screen.', isCorrect: false },
      { text: 'Ensuring compatibility with screen readers (e.g., VoiceOver on iOS, TalkBack on Android), providing sufficient touch target sizes, and supporting various device orientations.', isCorrect: true },
      { text: 'Requiring pinch-to-zoom for all content.', isCorrect: false },
      { text: 'Implementing features that only work in portrait mode.', isCorrect: false },
    ],
    explanation: 'Mobile accessibility involves many factors, including screen reader support, adequate touch target sizes (see WCAG 2.5.8 Target Size (Minimum)), handling orientation changes, and ensuring content reflows and text can be resized.',
  },
  {
    id: 64,
    text: 'WCAG SC 1.3.3 Sensory Characteristics (Level A) states that instructions provided for understanding and operating content do not rely solely on:',
    options: [
      { text: 'Text-based descriptions.', isCorrect: false },
      { text: 'Sensory characteristics of components such as shape, color, size, visual location, orientation, or sound.', isCorrect: true },
      { text: 'Keyboard commands.', isCorrect: false },
      { text: 'ARIA attributes.', isCorrect: false },
    ],
    explanation: 'SC 1.3.3 Sensory Characteristics (Level A) ensures that instructions are understandable even if a user cannot perceive shape, color, or location. For example, "Click the round, red button on the right" would need an alternative like "Click the \'Submit\' button".',
  },
  {
    id: 65,
    text: 'What is an accessibility "persona"?',
    options: [
      { text: 'A specific ARIA role for user profiles.', isCorrect: false },
      { text: 'A fictional character created to represent a user group with specific accessibility needs and characteristics, used to guide design and testing.', isCorrect: true },
      { text: 'An automated accessibility testing tool.', isCorrect: false },
      { text: 'A legal document outlining accessibility requirements.', isCorrect: false },
    ],
    explanation: 'Accessibility personas are user archetypes representing different disabilities or assistive technology usage. They help development teams empathize with users and consider diverse needs during the design and development process.',
  },
  {
    id: 66,
    text: 'The `prefers-reduced-motion` CSS media feature is used to:',
    options: [
      { text: 'Increase the speed of all animations on a website.', isCorrect: false },
      { text: 'Detect if the user has requested the system minimize the amount of non-essential motion it uses, allowing websites to provide alternative, less animated experiences.', isCorrect: true },
      { text: 'Force all animations to play in slow motion for debugging.', isCorrect: false },
      { text: 'Enable motion-based interactions like parallax scrolling.', isCorrect: false },
    ],
    explanation: 'The `prefers-reduced-motion` media query allows developers to respect a user\'s operating system setting for reducing motion. If a user prefers reduced motion, websites can disable or tone down animations, transitions, and other motion effects that could be distracting or trigger vestibular disorders (WCAG SC 2.3.3 Animation from Interactions).',
  },
  {
    id: 67,
    text: 'WCAG SC 4.1.1 Parsing (Level A) requires that in content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where:',
    options: [
      { text: 'The content is generated by a CMS.', isCorrect: false },
      { text: 'The specifications allow these features.', isCorrect: true },
      { text: 'The page is very small.', isCorrect: false },
      { text: 'The content is only for internal use.', isCorrect: false },
    ],
    explanation: 'SC 4.1.1 Parsing (Level A) aims to ensure robust parsing by user agents, including assistive technologies. While a major browser might render malformed HTML, assistive tech can be less forgiving. (Note: This SC has been debated and its interpretation can be complex, but the core idea is valid code).',
  },
  {
    id: 68,
    text: 'What is the role of an "Accessibility Statement" for a website?',
    options: [
      { text: 'It is a legally binding contract with users.', isCorrect: false },
      { text: 'It is a page that describes the website\'s commitment to accessibility, known conformance levels, any known issues, and contact information for reporting accessibility problems.', isCorrect: true },
      { text: 'It is a list of all ARIA attributes used on the site.', isCorrect: false },
      { text: 'It is an automated report from an accessibility checker.', isCorrect: false },
    ],
    explanation: 'An accessibility statement provides transparency about a website\'s accessibility efforts, its current level of conformance with standards like WCAG, any areas where it might fall short, and how users can get help or provide feedback.',
  },
  {
    id: 69,
    text: 'WCAG SC 1.4.11 Non-text Contrast (Level AA) applies to the visual presentation of:',
    options: [
      { text: 'The text within an image.', isCorrect: false },
      { text: 'User interface components and graphical objects (like icons and parts of charts).', isCorrect: true },
      { text: 'Photographic content.', isCorrect: false },
      { text: 'The website\'s logo.', isCorrect: false },
    ],
    explanation: 'SC 1.4.11 Non-text Contrast (Level AA) requires that visual information necessary to identify UI components (and their states) and parts of graphics required to understand the content have a contrast ratio of at least 3:1 against adjacent colors.',
  },
  {
    id: 70,
    text: 'What is "cognitive accessibility"?',
    options: [
      { text: 'Making websites understandable only by people with high IQs.', isCorrect: false },
      { text: 'Designing and developing web content so that it is easy to understand and use for people with a wide range of cognitive and learning disabilities.', isCorrect: true },
      { text: 'Using puzzles and games to test users\' cognitive abilities.', isCorrect: false },
      { text: 'A type of AI that understands human cognition.', isCorrect: false },
    ],
    explanation: 'Cognitive accessibility focuses on making information perceivable, operable, and understandable for users with diverse cognitive abilities. This includes considerations like clear language, consistent navigation, predictable layouts, and minimizing distractions.',
  },
  {
    id: 71,
    text: 'If a website uses infinite scrolling, what is a key accessibility consideration for the footer content?',
    options: [
      { text: 'The footer should be removed entirely.', isCorrect: false },
      { text: 'A mechanism must be provided to pause scrolling and access the footer, or the footer content must be accessible through other means (e.g., a persistent link).', isCorrect: true },
      { text: 'The footer should only load after all content has been scrolled.', isCorrect: false },
      { text: 'The footer must use very large text.', isCorrect: false },
    ],
    explanation: 'Infinite scrolling can prevent users, especially keyboard and screen reader users, from reaching footer content. Solutions include providing a "Load More" button instead of automatic loading, or ensuring footer links are available in a persistent header or sidebar.',
  },
  {
    id: 72,
    text: 'WCAG SC 3.2.6 Consistent Help (Level A) - a new criterion in WCAG 2.2 - requires that if a help mechanism is provided on multiple pages:',
    options: [
      { text: 'It must be an AI chatbot.', isCorrect: false },
      { text: 'It must be located in the same relative order on each page where it is included.', isCorrect: true },
      { text: 'It must be accessible via a keyboard shortcut.', isCorrect: false },
      { text: 'It must only provide help for accessibility features.', isCorrect: false },
    ],
    explanation: 'SC 3.2.6 Consistent Help (Level A) in WCAG 2.2 ensures that if a website provides a help mechanism (like a contact link, FAQ, or support page link), it is consistently located across pages, making it easier for users to find when needed.',
  },
  {
    id: 73,
    text: 'What does the `aria-atomic="true"` attribute, when used with `aria-live`, signify?',
    options: [
      { text: 'The live region updates atom by atom.', isCorrect: false },
      { text: 'Assistive technologies should present the entire content of the live region as a whole when any part of it changes, rather than just the changed part.', isCorrect: true },
      { text: 'The live region is for atomic physics content.', isCorrect: false },
      { text: 'The live region will self-destruct after one announcement.', isCorrect: false },
    ],
    explanation: 'When `aria-atomic="true"` is set on an `aria-live` region, it tells assistive technologies to announce the entire content of the region whenever any part of it is updated. This is useful if the context of the whole region is needed to understand the change.',
  },
  {
    id: 74,
    text: 'What is a primary benefit of using sufficient color contrast between text and its background?',
    options: [
      { text: 'It makes the website load faster.', isCorrect: false },
      { text: 'It improves readability for people with low vision, color vision deficiencies, and even for users in bright lighting conditions.', isCorrect: true },
      { text: 'It is only important for users who are colorblind.', isCorrect: false },
      { text: 'It makes the website design look more modern.', isCorrect: false },
    ],
    explanation: 'Good color contrast is fundamental for readability. It benefits users with various visual impairments and also improves the experience for all users in different environments (e.g., glare on a screen).',
  },
  {
    id: 75,
    text: 'WCAG SC 2.4.1 Bypass Blocks (Level A) aims to help users by:',
    options: [
      { text: 'Allowing them to bypass security checks.', isCorrect: false },
      { text: 'Providing a mechanism to bypass blocks of content that are repeated on multiple Web pages (e.g., navigation links, headers).', isCorrect: true },
      { text: 'Blocking distracting advertisements.', isCorrect: false },
      { text: 'Enabling users to skip form validation.', isCorrect: false },
    ],
    explanation: 'SC 2.4.1 Bypass Blocks (Level A) is typically met by providing "skip navigation" links, or by using landmark elements or headings effectively, so users (especially keyboard and screen reader users) can quickly navigate to the main content of a page.',
  },
  {
    id: 76,
    text: 'If a form submission leads to errors, how should these errors be communicated accessibly?',
    options: [
      { text: 'By only changing the border color of invalid fields to red.', isCorrect: false },
      { text: 'By providing a summary of errors at the top of the page, linking to each error, and clearly indicating each invalid field with a text-based error message next to it (programmatically associated). Focus should ideally be moved to the summary or first error.', isCorrect: true },
      { text: 'By showing a generic "Error occurred" message without specifics.', isCorrect: false },
      { text: 'By automatically clearing all fields and asking the user to start over.', isCorrect: false },
    ],
    explanation: 'Accessible error handling involves: identifying errors clearly in text, associating errors with their respective fields, providing a summary if multiple errors exist, and managing focus to help users easily find and fix them.',
  },
  {
    id: 77,
    text: 'What is the purpose of `aria-expanded` attribute, often used with accordions or disclosure widgets?',
    options: [
      { text: 'To indicate if an element can be resized.', isCorrect: false },
      { text: 'To inform assistive technologies whether a collapsible element is currently expanded (visible) or collapsed (hidden).', isCorrect: true },
      { text: 'To specify the maximum width of an element.', isCorrect: false },
      { text: 'To show how many items are in a list.', isCorrect: false },
    ],
    explanation: '`aria-expanded="true"` indicates that the controlled content is visible, and `aria-expanded="false"` indicates it is hidden. This is crucial for users of assistive technologies to understand the state of interactive disclosure widgets like accordions and tree menus.',
  },
  {
    id: 78,
    text: 'WCAG SC 1.4.13 Content on Hover or Focus (Level AA) addresses issues with content that appears on hover/focus (e.g., tooltips, submenus). It requires that this content is:',
    options: [
      { text: 'Always visible without hovering or focusing.', isCorrect: false },
      { text: 'Dismissible (e.g., via Esc key, or by moving pointer/focus away), Hoverable (pointer can be moved over the additional content without it disappearing), and Persistent (remains visible until dismissed or focus/hover is removed, or the information is no longer valid).', isCorrect: true },
      { text: 'Only visible for a maximum of 5 seconds.', isCorrect: false },
      { text: 'Displayed at the bottom of the screen.', isCorrect: false },
    ],
    explanation: 'SC 1.4.13 Content on Hover or Focus (Level AA) ensures that additional content triggered by hover or focus doesn\'t obscure other content, can be easily dismissed, and allows users to move their pointer over it (e.g., to interact with controls within a submenu) without it vanishing prematurely.',
  },
  {
    id: 79,
    text: 'Which of the following is a common barrier for users with dyslexia on the web?',
    options: [
      { text: 'Too much white space.', isCorrect: false },
      { text: 'Large, justified blocks of text with insufficient line spacing, or complex fonts.', isCorrect: true },
      { text: 'Use of icons to supplement text.', isCorrect: false },
      { text: 'Dark mode themes.', isCorrect: false },
    ],
    explanation: 'Users with dyslexia can find it challenging to read long lines of justified text (which creates uneven spacing), text with insufficient line height, or overly stylized/complex fonts. Providing options to customize text appearance can help.',
  },
  {
    id: 80,
    text: 'The `role="alert"` ARIA attribute is typically used for:',
    options: [
      { text: 'Confirming a successful action.', isCorrect: false },
      { text: 'Dynamically rendered error messages or warnings that need to be announced to users immediately, without necessarily moving focus.', isCorrect: true },
      { text: 'Labeling an alert icon.', isCorrect: false },
      { text: 'Creating a modal dialog that contains an alert.', isCorrect: false },
    ],
    explanation: '`role="alert"` creates an assertive live region. When content is injected into an element with this role, screen readers typically announce it immediately, making it suitable for time-sensitive error messages or warnings.',
  },
  {
    id: 81,
    text: 'WCAG SC 2.1.2 No Keyboard Trap (Level A) means:',
    options: [
      { text: 'Websites cannot use keyboard shortcuts.', isCorrect: false },
      { text: 'If keyboard focus can be moved to a component using a keyboard interface, then focus can be moved away from that component using only a keyboard interface.', isCorrect: true },
      { text: 'All keyboard input must be validated.', isCorrect: false },
      { text: 'Keyboards must have a specific layout.', isCorrect: false },
    ],
    explanation: 'SC 2.1.2 No Keyboard Trap (Level A) ensures that keyboard users can navigate into AND out of all interactive components. If they tab into something, they must be able to tab out or use other standard navigation keys (like Esc for modals) to leave.',
  },
  {
    id: 82,
    text: 'When using a carousel or slider, what accessibility features are important?',
    options: [
      { text: 'It must auto-play very quickly.', isCorrect: false },
      { text: 'Clear controls for previous/next, a pause/play button if it auto-rotates, keyboard operability for all controls, and appropriate ARIA attributes to announce slide changes and current slide.', isCorrect: true },
      { text: 'It should only be controllable with touch gestures.', isCorrect: false },
      { text: 'Slide indicators must be tiny dots.', isCorrect: false },
    ],
    explanation: 'Accessible carousels need: keyboard-operable controls (prev/next, pause/play, slide indicators), ARIA to communicate state (e.g., `aria-live` for slide announcements, `aria-roledescription="carousel"`), and if auto-playing, a mechanism to pause (SC 2.2.2 Pause, Stop, Hide).',
  },
  {
    id: 83,
    text: 'What is the purpose of using `aria-current="page"` on a navigation link?',
    options: [
      { text: 'To indicate the link is external.', isCorrect: false },
      { text: 'To programmatically indicate to assistive technologies that the link represents the current page within a set of navigation links (e.g., in a menu or breadcrumbs).', isCorrect: true },
      { text: 'To mark the link as visited.', isCorrect: false },
      { text: 'To specify the primary navigation link on the page.', isCorrect: false },
    ],
    explanation: '`aria-current="page"` (or other values like "step", "date") provides a way for assistive technologies to identify the currently active item in a navigation structure, breadcrumb, or pagination, enhancing orientation for users.',
  },
  {
    id: 84,
    text: 'WCAG SC 1.4.2 Audio Control (Level A) requires that if any audio on a Web page plays automatically for more than 3 seconds:',
    options: [
      { text: 'The audio must be of high quality.', isCorrect: false },
      { text: 'Either a mechanism is available to pause or stop the audio, or a mechanism is available to control audio volume independently from the overall system volume level.', isCorrect: true },
      { text: 'A transcript must be provided.', isCorrect: false },
      { text: 'The audio must have captions.', isCorrect: false },
    ],
    explanation: 'SC 1.4.2 Audio Control (Level A) prevents unexpected and potentially disruptive audio. If audio auto-plays for over 3 seconds, users must be able to stop/pause it or control its volume separately from system volume.',
  },
  {
    id: 85,
    text: 'When designing forms, placing labels directly above or to the left (for LTR languages) of their corresponding input fields generally improves:',
    options: [
      { text: 'The visual appeal for designers.', isCorrect: false },
      { text: 'The visual association for sighted users and makes it easier for screen magnification users to see both label and field.', isCorrect: true },
      { text: 'The form\'s submission speed.', isCorrect: false },
      { text: 'The security of the form data.', isCorrect: false },
    ],
    explanation: 'Close proximity between a label and its input field helps users quickly understand which label belongs to which field. For screen magnification users, it keeps both in view. Programmatic association (e.g., `<label for="...">`) is still essential for screen reader users.',
  },
  {
    id: 86,
    text: 'What is an important consideration for "Graceful Degradation" in web accessibility?',
    options: [
      { text: 'Ensuring the website looks best in the newest browsers and degrades poorly in older ones.', isCorrect: false },
      { text: 'Building a feature-rich application that still provides core functionality and content access even if some advanced features (like JavaScript) fail or are unavailable.', isCorrect: true },
      { text: 'Gradually removing features from a website over time.', isCorrect: false },
      { text: 'Making sure error messages are styled gracefully.', isCorrect: false },
    ],
    explanation: 'Graceful degradation is an approach where you design for modern browsers/capabilities first, but also ensure the site remains usable and accessible if those advanced features aren\'t supported or fail. It complements progressive enhancement.',
  },
  {
    id: 87,
    text: 'WCAG SC 2.5.1 Pointer Gestures (Level A) ensures that all functionality that uses multipoint or path-based gestures for operation can also be operated by:',
    options: [
      { text: 'Voice input.', isCorrect: false },
      { text: 'A single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.', isCorrect: true },
      { text: 'A standard keyboard.', isCorrect: false },
      { text: 'A specialized assistive technology.', isCorrect: false },
    ],
    explanation: 'SC 2.5.1 Pointer Gestures (Level A) means that if you can, for example, swipe or pinch-zoom, there should also be simple tap/click alternatives (e.g., buttons for next/previous, zoom in/out), unless the gesture itself is fundamental to the task (like drawing a signature).',
  },
  {
    id: 88,
    text: 'The `aria-modal="true"` attribute, when used on a dialog element, indicates to assistive technologies that:',
    options: [
      { text: 'The dialog content is very important.', isCorrect: false },
      { text: 'Windows underneath the current dialog are not supposed to be interactive when the dialog is open.', isCorrect: true },
      { text: 'The dialog requires a modal verb in its title.', isCorrect: false },
      { text: 'The dialog can be moved around the screen.', isCorrect: false },
    ],
    explanation: '`aria-modal="true"` signals that the current dialog is modal, meaning interaction with content outside the dialog should be prevented until the dialog is closed. This is often used in conjunction with JavaScript to manage focus and inertness of background content.',
  },
  {
    id: 89,
    text: 'What does "device independence" mean in the context of accessibility?',
    options: [
      { text: 'The website only works on one specific device.', isCorrect: false },
      { text: 'Functionality is available regardless of the specific input device being used (e.g., mouse, keyboard, touch, voice).', isCorrect: true },
      { text: 'The website can detect the user\'s device and adapt its layout.', isCorrect: false },
      { text: 'Users do not need any device to access the content.', isCorrect: false },
    ],
    explanation: 'Device independence means designing interactions so they don\'t rely on a particular input method. For example, an action triggered by mouse hover should also be triggerable by keyboard focus.',
  },
  {
    id: 90,
    text: 'WCAG SC 3.3.1 Error Identification (Level A) requires that if an input error is automatically detected:',
    options: [
      { text: 'The page must reload.', isCorrect: false },
      { text: 'The item that is in error is identified and the error is described to the user in text.', isCorrect: true },
      { text: 'A sound plays to indicate an error.', isCorrect: false },
      { text: 'The user is logged out for security reasons.', isCorrect: false },
    ],
    explanation: 'SC 3.3.1 Error Identification (Level A) ensures that users are made aware of input errors in a clear, textual way, allowing them to correct the errors. Simply changing a border color is not sufficient.',
  },
  {
    id: 91,
    text: 'When using `<iframe>` elements, what is an important accessibility consideration for their content?',
    options: [
      { text: '`<iframe>` elements should never be used.', isCorrect: false },
      { text: 'The `<iframe>` should have a descriptive `title` attribute, and the content within the iframe must also be accessible.', isCorrect: true },
      { text: 'The `<iframe>` must have a fixed width and height.', isCorrect: false },
      { text: 'Content inside an `<iframe>` does not need to meet accessibility standards.', isCorrect: false },
    ],
    explanation: 'A `title` attribute on the `<iframe>` provides context to screen reader users about its content. Furthermore, the actual HTML document loaded into the iframe must independently meet accessibility requirements.',
  },
  {
    id: 92,
    text: 'The "Robust" principle of WCAG means that content must be robust enough that it can be interpreted reliably by:',
    options: [
      { text: 'Only the latest web browsers.', isCorrect: false },
      { text: 'A wide variety of user agents, including assistive technologies.', isCorrect: true },
      { text: 'Search engine crawlers exclusively.', isCorrect: false },
      { text: 'Website administrators.', isCorrect: false },
    ],
    explanation: 'The Robust principle emphasizes using web standards correctly (e.g., valid HTML, proper use of ARIA) so that content is compatible with current and future user agents, including various browsers and assistive technologies.',
  },
  {
    id: 93,
    text: 'What is a common accessibility pitfall of single-page applications (SPAs)?',
    options: [
      { text: 'They load too quickly.', isCorrect: false },
      { text: 'Changes in content or view are not announced to screen readers, and focus is not managed appropriately during route changes.', isCorrect: true },
      { text: 'They cannot use ARIA attributes.', isCorrect: false },
      { text: 'They are inherently more secure.', isCorrect: false },
    ],
    explanation: 'In SPAs, page content changes without a full page reload. Developers must ensure screen readers announce these changes (e.g., by updating the page title, using `aria-live` regions) and that keyboard focus is moved to a logical place in the new view.',
  },
  {
    id: 94,
    text: 'WCAG SC 2.4.7 Focus Visible (Level AA) requires that any keyboard operable user interface has a mode of operation where the keyboard focus indicator is:',
    options: [
      { text: 'Hidden by default.', isCorrect: false },
      { text: 'Visible.', isCorrect: true },
      { text: 'Animated.', isCorrect: false },
      { text: 'Only visible for 1 second.', isCorrect: false },
    ],
    explanation: 'SC 2.4.7 Focus Visible (Level AA) ensures that keyboard users can easily see which element currently has focus. This is often a border or outline around the focused component. Disabling or poorly styling focus indicators is a common accessibility issue.',
  },
  {
    id: 95,
    text: 'The `aria-controls` attribute is used to:',
    options: [
      { text: 'Indicate which element is controlling the current one.', isCorrect: false },
      { text: 'Identify the element(s) whose content or presence is controlled by the current element (e.g., a button controlling a collapsible region).', isCorrect: true },
      { text: 'Define keyboard shortcuts for an element.', isCorrect: false },
      { text: 'Specify if an element can be controlled by touch gestures.', isCorrect: false },
    ],
    explanation: '`aria-controls` creates a programmatic relationship between a controlling element (like a tab or button) and the content it controls (like a tab panel or an expanded section). This helps assistive technologies understand the connection.',
  },
  {
    id: 96,
    text: 'What is an example of providing redundant modalities for information?',
    options: [
      { text: 'Showing the same error message twice.', isCorrect: false },
      { text: 'Presenting information both visually (e.g., a red icon for error) and textually ("Error: Invalid input").', isCorrect: true },
      { text: 'Using only audio cues for notifications.', isCorrect: false },
      { text: 'Having a text-only version and a graphics-only version of a site.', isCorrect: false },
    ],
    explanation: 'Providing information in multiple ways (e.g., visual, auditory, textual) ensures that users who cannot perceive one modality can still access the information through another. This is a core concept in universal design.',
  },
  {
    id: 97,
    text: 'WCAG SC 3.3.4 Error Prevention (Legal, Financial, Data) (Level AA) applies to web pages that cause legal commitments or financial transactions, modify/delete user-controllable data, or submit test responses. For these, at least one of the following is true:',
    options: [
      { text: 'Actions are always irreversible.', isCorrect: false },
      { text: 'Submissions are reversible, data entered is checked for errors and the user can correct them, or a mechanism is available for reviewing, confirming, and correcting information before final submission.', isCorrect: true },
      { text: 'Users must call a phone number to confirm.', isCorrect: false },
      { text: 'A 24-hour waiting period is enforced before submission.', isCorrect: false },
    ],
    explanation: 'SC 3.3.4 Error Prevention (Level AA) helps prevent serious consequences from user mistakes by requiring that for critical actions, users can reverse, check, or confirm their input before finalizing.',
  },
  {
    id: 98,
    text: 'When using decorative SVG images, what is a good practice for accessibility?',
    options: [
      { text: 'Always include a `<title>` element within the SVG.', isCorrect: false },
      { text: 'Add `aria-hidden="true"` to the `<svg>` element and ensure it has no focusable content, or use `role="presentation"`.', isCorrect: true },
      { text: 'Ensure the SVG has complex path data.', isCorrect: false },
      { text: 'Link the SVG to an external stylesheet.', isCorrect: false },
    ],
    explanation: 'For purely decorative SVGs that add no information, `aria-hidden="true"` will remove them from the accessibility tree. Alternatively, `role="img"` with an empty `aria-label` or `role="presentation"` can be used. If the SVG contains meaningful text, that text should be accessible.',
  },
  {
    id: 99,
    text: 'What is the primary benefit of conducting usability testing with people with disabilities?',
    options: [
      { text: 'It is cheaper than automated testing.', isCorrect: false },
      { text: 'It provides direct feedback on real-world accessibility barriers and usability issues that automated tools might miss, leading to a more inclusive product.', isCorrect: true },
      { text: 'It guarantees 100% WCAG conformance.', isCorrect: false },
      { text: 'It is only useful for websites specifically targeting users with disabilities.', isCorrect: false },
    ],
    explanation: 'Testing with users with disabilities provides invaluable insights into how they interact with your website using their assistive technologies and preferred methods. This uncovers practical barriers that automated checks cannot find.',
  },
  {
    id: 100,
    text: 'The WCAG 2.2 success criterion "Consistent Help" (3.2.6) is rated at which conformance level?',
    options: [
      { text: 'Level A', isCorrect: true },
      { text: 'Level AA', isCorrect: false },
      { text: 'Level AAA', isCorrect: false },
      { text: 'It is not part of WCAG 2.2', isCorrect: false },
    ],
    explanation: 'SC 3.2.6 Consistent Help is a Level A success criterion introduced in WCAG 2.2. It requires that if help mechanisms are provided on multiple pages, they are included in the same relative order to make them easy to find.',
  },
];
